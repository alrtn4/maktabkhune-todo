{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/Header.jsx","components/Item.jsx","components/items.jsx","components/ClearCompleted.jsx","components/Filter.jsx","components/Counter.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","observable","action","todoStore","lastId","todos","push","filter","todosCopyCopy","toConsumableArray","todo","index","findIndex","splice","Header","state","value","handleKeyDown","event","keyCode","preventDefault","addTodo","_this","setState","_this2","react_default","a","createElement","className","type","placeholder","onChange","target","onKeyDown","Component","Item","observer","props","checked","onClick","toggle","clear","Items","map","components_Item","ClearCompleted","clearCompleted","Filter","changeFilter","href","Counter","num","forEach","Footer","components_Counter","components_Filter","components_ClearCompleted","App","components_Header","items","length","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ba8f729.chunk.js","sourcesContent":["import {observable, action} from 'mobx'\n\nexport default class TodoModel {\n    store\n    id\n    @observable title\n    @observable completed\n\n    constructor(store , title, completed, id) {\n        this.store = store\n        this.id = id\n        this.title = title\n        this.completed = completed\n    }\n\n    @action\n    toggle() {\n        this.completed = !this.completed\n    }\n}\n","import { observable, action } from 'mobx'\nimport TodoModel from \"./TodoModel\";\n\nclass TodoStore {\n    @observable todos = []\n    lastId = 0\n    @observable filter = 'All'\n\n    @action\n    addTodo(title) {\n        this.todos.push(new TodoModel(this, title, false, this.lastId++))\n    }\n\n    @action\n    changeFilter(filter) {\n        this.filter = filter \n    }\n\n    @action\n    clearCompleted() {\n        let todosCopy = [...this.todos]\n        let todosCopyCopy = todosCopy.filter((todo) => {return (todo.completed === false)})\n        this.todos = todosCopyCopy\n    }\n\n    @action\n    clear(id) {\n        let index = this.todos.findIndex((todo) => {return todo.id === id})\n        this.todos.splice(index , 1)\n    }\n}\n\n\nconst todoStore = new TodoStore()\nexport default todoStore\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\nclass Header extends Component {\r\n  state = {\r\n    value: \"\",\r\n  };\r\n\r\n  handleKeyDown = (event) => {\r\n    if( event.keyCode !== 13 ) {\r\n      return\r\n    }\r\n    event.preventDefault()\r\n    todoStore.addTodo(this.state.value)\r\n    this.setState({\r\n      value : ''\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>todos</h1>\r\n        <input\r\n          value={this.state.value}\r\n          type=\"text\"\r\n          className=\"new-todo\"\r\n          placeholder=\"What needs to be done?\"\r\n          onChange={(event) => this.setState({value : event.target.value})}\r\n          onKeyDown={(event) => this.handleKeyDown(event)}\r\n        />\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport TodoModel from \"./../stores/TodoModel\";\r\nimport todoStore from \"./../stores/TodoStore\";\r\n\r\n@observer\r\nclass Item extends Component {\r\n  render() {\r\n    const { todo } = this.props;\r\n\r\n    return (\r\n      <li className={todo.completed ? \"completed\" : \" \"}>\r\n        <div className=\"view\">\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"toggle\"\r\n            value=\"on\"\r\n            checked={todo.completed}\r\n            onClick={() => {\r\n              todo.toggle();\r\n            }}\r\n          />\r\n          <label>{todo.title}</label>\r\n          <button\r\n            className=\"destroy\"\r\n            onClick={() => {\r\n              todoStore.clear(todo.id);\r\n            }}\r\n          />\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Item;\r\n","import React, { Component } from \"react\";\r\nimport Item from \"./Item\";\r\nimport { observer } from \"mobx-react\";\r\nimport todoStore from \"./../stores/TodoStore\";\r\n\r\n@observer\r\nclass Items extends Component {\r\n  render() {\r\n    return (\r\n      <section className=\"main\">\r\n        <ul className=\"todo-list\">\r\n          {todoStore.todos.map((todo) => {\r\n            if (todoStore.filter === \"All\") {\r\n              return <Item todo={todo} />;\r\n            } else if (\r\n              todoStore.filter === \"Active\" &&\r\n              todo.completed === false\r\n            ) {\r\n              return <Item todo={todo} />;\r\n            } else if (\r\n              todoStore.filter === \"Completed\" &&\r\n              todo.completed === true\r\n            ) {\r\n              return <Item todo={todo} />;\r\n            }\r\n            // return null;\r\n          })}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Items;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass ClearCompleted extends Component {\r\n  render() {\r\n    return todoStore.todos.findIndex((todo) => todo.completed === true) !==\r\n      -1 ? (\r\n      <div\r\n        className=\"clear-completed\"\r\n        onClick={() => todoStore.clearCompleted()}\r\n      >\r\n        Clear completed\r\n      </div>\r\n    ) : null;\r\n  }\r\n}\r\n\r\nexport default ClearCompleted;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass Filter extends Component {\r\n  render() {\r\n    return (\r\n      <li onClick={() => todoStore.changeFilter(this.props.filter)}>\r\n        <a\r\n          className={todoStore.filter === this.props.filter ? \"selected\" : null}\r\n          href=\"\"\r\n          onClick={(event) => {\r\n            event.preventDefault();\r\n          }}\r\n        >\r\n          {this.props.filter}\r\n        </a>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Filter\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass Counter extends Component {\r\n  render() {\r\n    let num = 0;\r\n    return (\r\n      <div className=\"todo-count\">\r\n        <strong>\r\n          {todoStore.todos.forEach((todo) => {\r\n            if (todo.completed === false) {\r\n              num++;\r\n            }\r\n          })}\r\n          {num}\r\n        </strong>{\" \"}\r\n        items left\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport ClearCompleted from \"./ClearCompleted\";\r\nimport Filter from \"./Filter\";\r\nimport Counter from \"./Counter\";\r\n\r\n@observer\r\nclass Footer extends Component {\r\n  render() {\r\n    let num = 0;\r\n    return (\r\n      <div className=\"footer\">\r\n        <Counter />\r\n        <div>\r\n          <ul className=\"filters\">\r\n            <Filter filter='All' />\r\n            <Filter filter='Active' />\r\n            <Filter filter='Completed' />\r\n          </ul>\r\n        </div>\r\n        <ClearCompleted />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Items from \"./components/items\";\nimport Footer from './components/Footer'\nimport todoStore from './stores/TodoStore';\n\n@observer\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"todoapp\" className=\"todoapp\">\n        <Header />\n        <Items />\n        {todoStore.todos.length > 0 ? <Footer /> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}